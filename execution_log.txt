Script:
import pandas as pd
import os

# Ensure the plots directory exists
os.makedirs('data/plots/1', exist_ok=True)

# Try reading the CSV with 'ISO-8859-1' encoding and error handling
try:
    df = pd.read_csv('data/csv/1/data.csv', encoding='ISO-8859-1', errors='replace')
except Exception as e:
    result = {'error': str(e)}
    result
else:
    # Preview columns to infer profit and revenue columns
    columns = df.columns.str.lower()
    # Try to find likely column names
    profit_col = next((col for col in columns if 'profit' in col), None)
    revenue_col = next((col for col in columns if 'revenue' in col or 'sales' in col or 'amount' in col), None)
    category_col = next((col for col in columns if 'category' in col), None)
    
    if not all([profit_col, revenue_col, category_col]):
        result = {'error': f'Missing required columns. Found columns: {list(df.columns)}'}
    else:
        # Calculate profit margin by product category
        df['profit_margin'] = df[profit_col] / df[revenue_col] * 100
        margin_by_category = df.groupby(category_col)['profit_margin'].mean().reset_index()
        # Convert to dict for output
        result = margin_by_category.to_dict(orient='records')
    result
Script:
import pandas as pd
import matplotlib.pyplot as plt
import os

# Ensure the plots directory exists
os.makedirs('data/plots/1', exist_ok=True)

# Read the data with utf-8 encoding
file_path = 'data/csv/1/data.csv'
df = pd.read_csv(file_path, encoding='utf-8')

# Calculate profit and profit margin
# Profit = Net Revenue - COGS - Tax Amount
# Profit Margin = Profit / Net Revenue

df['profit'] = df['net_revenue'] - df['cogs'] - df['tax_amount']
df['profit_margin'] = df['profit'] / df['net_revenue']

# Group by product category
category_margin = df.groupby('product_category').agg({'profit': 'sum', 'net_revenue': 'sum'}).reset_index()
category_margin['profit_margin'] = category_margin['profit'] / category_margin['net_revenue']

# Save table for visualization
table = category_margin[['product_category', 'profit_margin']].to_dict(orient='records')

# Plot
plt.figure(figsize=(8,5))
plt.bar(category_margin['product_category'], category_margin['profit_margin'], color='skyblue')
plt.ylabel('Profit Margin')
plt.xlabel('Product Category')
plt.title('Profit Margin by Product Category')
plt.ylim(0, 1)
plt.tight_layout()
plot_path = 'data/plots/1/profit_margin_by_category.png'
plt.savefig(plot_path)
plt.close()

# Output table and plot path
output = {'table': table, 'plot_path': plot_path}
output
